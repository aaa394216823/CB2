names(malignant_predict)[seq_along(null_cell)] <- null_cell
mel_meta$malignant_predict <- malignant_predict[mel_meta$cellname]
# Remove those unresolved
mel_meta_sub <- mel_meta[mel_meta$malignant!="unresolved",]
# "FDR"
mel_meta_sub[mel_meta_sub$malignant_predict=="yes",]$malignant %>%table
# "Power"
mel_meta_sub[mel_meta_sub$malignant=="yes",]$malignant_predict %>%table
117+1219
table(malignant_predict)
table(mel_meta_sub$malignant_predict)
117/1336
mel_meta_sub[mel_meta_sub$malignant=="yes",]$malignant_predict %>%table
table(mel_meta_sub$malignant)
1219/1257
plot(TPR~FPR, type="l")
abline(0,1,lty="dashed")
plot(TPR~FPR, type="l")
abline(0,1,lty="dashed")
mean(mel_meta_sub$malignant==mel_meta_sub$malignant_predict)
table(mel_meta_sub$malignant)
3256+1257
sum(mel_meta_sub$malignant==mel_meta_sub$malignant_predict)
4358/4536
length(mel_meta_sub$malignant==mel_meta_sub$malignant_predict)
4358/4513
CNV_list <- list(CNV_1=cbind(read.table("~/Google Drive/Hallu/codes/ckgroup/Hong_CTC/inferCNV_1/infercnv.observations.txt"),
read.table("~/Google Drive/Hallu/codes/ckgroup/Hong_CTC/inferCNV_1/infercnv.references.txt"))%>%as.matrix,
CNV_2=cbind(read.table("~/Google Drive/Hallu/codes/ckgroup/Hong_CTC/inferCNV_2/infercnv.observations.txt"),
read.table("~/Google Drive/Hallu/codes/ckgroup/Hong_CTC/inferCNV_2/infercnv.references.txt"))%>%as.matrix)
Cell_list <- list(Cell_1=Hong_CB2_1, Cell_2=Hong_CB2_2)
Cell_list$Cell_1 <- Cell_list$Cell_1[,CNV_list$CNV_1%>%colnames]
for(i in 1:2){
colnames(CNV_list[[i]]) <- gsub("\\.","-",colnames(CNV_list[[i]]))
CNV_list[[i]] <- CNV_list[[i]][,colnames(Cell_list[[i]])]
}
Summary_list <- list()
Target
Target%in%rownames(CNV_list$CNV_1)
Target%in%rownames(CNV_list$CNV_2)
x <- rnorm(10)
var(x)
x <- rnorm(100)
var(x)
x <- rnorm(1000)
var(x)
Summary_list <- list()
for(i in 1:2){
cell_tmp <- Cell_list[[i]]
CNV_tmp <- CNV_list[[i]]
Num_Pos_Gene <- colSums(cell_tmp[Target,]>0)
CoV <- apply(CNV_tmp,2,function(x) sd(x)/mean(x))
target_exp <- t(cell_tmp[Target,])
colnames(target_CNV) <- paste0(colnames(target_CNV),"_CNV")
Summary_list[[paste0("batch_",i)]] <- cbind(CoV=CoV,Num_Pos_Gene=Num_Pos_Gene,
target_exp,target_CNV)
rownames(Summary_list[[paste0("batch_",i)]]) <- colnames(cell_tmp)
}
Summary_list <- list()
for(i in 1:2){
cell_tmp <- Cell_list[[i]]
CNV_tmp <- CNV_list[[i]]
Num_Pos_Gene <- colSums(cell_tmp[Target,]>0)
CoV <- apply(CNV_tmp,2,function(x) sd(x)/mean(x))
target_exp <- t(cell_tmp[Target,])
colnames(target_CNV) <- paste0(colnames(target_CNV),"_CNV")
Summary_list[[paste0("batch_",i)]] <- cbind(CoV=CoV,Num_Pos_Gene=Num_Pos_Gene,
target_exp)
rownames(Summary_list[[paste0("batch_",i)]]) <- colnames(cell_tmp)
}
Summary_list <- list()
for(i in 1:2){
cell_tmp <- Cell_list[[i]]
CNV_tmp <- CNV_list[[i]]
Num_Pos_Gene <- colSums(cell_tmp[Target,]>0)
CoV <- apply(CNV_tmp,2,function(x) sd(x)/mean(x))
target_exp <- t(cell_tmp[Target,])
Summary_list[[paste0("batch_",i)]] <- cbind(CoV=CoV,Num_Pos_Gene=Num_Pos_Gene,
target_exp)
rownames(Summary_list[[paste0("batch_",i)]]) <- colnames(cell_tmp)
}
head(Summary_list$batch_1)
str(Summary_list$batch_1)
table(Summary_list$batch_1[,2])
table(Summary_list$batch_1[,3])
table(Summary_list$batch_1[,4])
table(Summary_list$batch_1[,5])
table(Summary_list$batch_1[,6])
save(Summary_list, file = "~/Google Drive/Hallu/codes/ckgroup/Hong_CTC/TargetGene_summary.RData")
load("~/Google Drive/Hallu/codes/ckgroup/Hong_CTC/CB2_Seurat.RData")
DimPlot(Hong_S_2, cells = positive_cell_2,
reduction = "umap")+
theme(legend.position = "none")
str(positive_cell_2)
sort(Summary_list$batch_2[,1])%>%head
sort(Summary_list$batch_2[,1],decreasing = T)%>%head
sort(Summary_list$batch_2[,1],decreasing = T)[10]
which(Summary_list$batch_2[,1]>=sort(Summary_list$batch_2[,1],decreasing = T)[10]
)
rownames(Summary_list$batch_2)[Summary_list$batch_2[,1]>=sort(Summary_list$batch_2[,1],decreasing = T)[10]]
highlight_plot <- function(batch,column,cutoff){
if(batch==1){
dp <- DimPlot(Hong_S_1, cells = positive_cell_1,
reduction = "umap",
cells.highlight=rownames(Summary_list$batch_1)[Summary_list$batch_1[,column]>=
sort(Summary_list$batch_1[,column],decreasing = T)[10]])+
theme(legend.position = "none")
}else{
dp <- DimPlot(Hong_S_2, cells = positive_cell_2,
reduction = "umap",
cells.highlight=rownames(Summary_list$batch_2)[Summary_list$batch_2[,column]>=
sort(Summary_list$batch_2[,column],decreasing = T)[10]])+
theme(legend.position = "none")
}
plot(dp)
}
highlight_plot(1,1,10)
highlight_plot(1,1,50)
highlight_plot <- function(batch,column,cutoff){
if(batch==1){
dp <- DimPlot(Hong_S_1, cells = positive_cell_1,
reduction = "umap",
cells.highlight=rownames(Summary_list$batch_1)[Summary_list$batch_1[,column]>=
sort(Summary_list$batch_1[,column],decreasing = T)[cutoff]])+
theme(legend.position = "none")
}else{
dp <- DimPlot(Hong_S_2, cells = positive_cell_2,
reduction = "umap",
cells.highlight=rownames(Summary_list$batch_2)[Summary_list$batch_2[,column]>=
sort(Summary_list$batch_2[,column],decreasing = T)[cutoff]])+
theme(legend.position = "none")
}
plot(dp)
}
highlight_plot(1,1,10)
highlight_plot(1,1,50)
highlight_plot(1,1,100)
highlight_plot(1,1,200)
highlight_plot(1,2,10) # 1: CoV, 2: Num_Pos_Gene
highlight_plot(1,2,50)
highlight_plot(1,2,100)
highlight_plot(1,2,200)
highlight_plot <- function(batch,column,cutoff){
if(batch==1){
dp <- DimPlot(Hong_S_1, cells = positive_cell_1,
reduction = "umap",
cells.highlight=rownames(Summary_list$batch_1)[Summary_list$batch_1[,column]>=
sort(Summary_list$batch_1[,column],decreasing = T)[cutoff]])+
theme(legend.position = "none")
}else{
dp <- DimPlot(Hong_S_2, cells = positive_cell_2,
reduction = "umap",
cells.highlight=rownames(Summary_list$batch_2)[Summary_list$batch_2[,column]>=
sort(Summary_list$batch_2[,column],decreasing = T)[cutoff]])+
theme(legend.position = "none")
}
return(dp)
}
layout <- "AB\nCD"
highlight_plot(1,1,10)+ # 1: CoV, 2: Num_Pos_Gene
highlight_plot(1,1,50)+
highlight_plot(1,1,100)+
highlight_plot(1,1,200)+plot_layout(design = layout)
highlight_plot <- function(batch,column,cutoff){
if(batch==1){
dp <- DimPlot(Hong_S_1, cells = positive_cell_1,
reduction = "umap",
cells.highlight=rownames(Summary_list$batch_1)[Summary_list$batch_1[,column]>=
sort(Summary_list$batch_1[,column],decreasing = T)[cutoff]])+
theme(legend.position = "none")
}else{
dp <- DimPlot(Hong_S_2, cells = positive_cell_2,
reduction = "umap",
cells.highlight=rownames(Summary_list$batch_2)[Summary_list$batch_2[,column]>=
sort(Summary_list$batch_2[,column],decreasing = T)[cutoff]])+
theme(legend.position = "none")
}
return(dp+labs(title=paste0("top ",cutoff)))
}
layout <- "AB\nCD"
highlight_plot(1,1,10)+ # 1: CoV, 2: Num_Pos_Gene
highlight_plot(1,1,50)+
highlight_plot(1,1,100)+
highlight_plot(1,1,200)+plot_layout(design = layout)
highlight_plot(1,2,10)+ # 1: CoV, 2: Num_Pos_Gene
highlight_plot(1,2,50)+
highlight_plot(1,2,100)+
highlight_plot(1,2,200)+plot_layout(design = layout)
highlight_plot(2,1,10)+ # 1: CoV, 2: Num_Pos_Gene
highlight_plot(2,1,50)+
highlight_plot(2,1,100)+
highlight_plot(2,1,200)+plot_layout(design = layout)
highlight_plot(2,2,10)+ # 1: CoV, 2: Num_Pos_Gene
highlight_plot(2,2,50)+
highlight_plot(2,2,100)+
highlight_plot(2,2,200)+plot_layout(design = layout)
highlight_plot(1,1,10)+ # 1: CoV, 2: Num_Pos_Gene
highlight_plot(1,1,50)+
highlight_plot(1,1,100)+
highlight_plot(1,1,200)+plot_layout(design = layout)
highlight_plot(1,2,10)+ # 1: CoV, 2: Num_Pos_Gene
highlight_plot(1,2,50)+
highlight_plot(1,2,100)+
highlight_plot(1,2,200)+plot_layout(design = layout)
highlight_plot(2,1,10)+ # 1: CoV, 2: Num_Pos_Gene
highlight_plot(2,1,50)+
highlight_plot(2,1,100)+
highlight_plot(2,1,200)+plot_layout(design = layout)
highlight_plot(2,2,10)+ # 1: CoV, 2: Num_Pos_Gene
highlight_plot(2,2,50)+
highlight_plot(2,2,100)+
highlight_plot(2,2,200)+plot_layout(design = layout)
str(Target)
highlight_plot(1,1,10)+ # 1: CoV, 2: Num_Pos_Gene
highlight_plot(1,1,50)+
highlight_plot(1,1,100)+
highlight_plot(1,1,200)+plot_layout(design = layout)
batch=1
column=1
cutoff=10
rownames(Summary_list$batch_1)[Summary_list$batch_1[,column]>=
sort(Summary_list$batch_1[,column],decreasing = T)[cutoff]])
rownames(Summary_list$batch_1)[Summary_list$batch_1[,column]>=
sort(Summary_list$batch_1[,column],decreasing = T)[cutoff]]
rownames(Summary_list$batch_1)[Summary_list$batch_1[,column]>=
sort(Summary_list$batch_1[,column],decreasing = T)[cutoff]]%in%positive_cell_1
str(Summary_list$batch_1)
Summary_list$batch_1[,column]>=
sort(Summary_list$batch_1[,column],decreasing = T)[cutoff]]
Summary_list$batch_1[,column]>=
sort(Summary_list$batch_1[,column],decreasing = T)[cutoff]
sum(Summary_list$batch_1[,column]>=
sort(Summary_list$batch_1[,column],decreasing = T)[cutoff])
sum(Summary_list$batch_1[positive_cell_1,column]>=
sort(Summary_list$batch_1[positive_cell_1,column],decreasing = T)[cutoff])
which(Summary_list$batch_1[positive_cell_1,column]>=
sort(Summary_list$batch_1[positive_cell_1,column],decreasing = T)[cutoff])
highlight_plot <- function(batch,column,cutoff){
if(batch==1){
dp <- DimPlot(Hong_S_1, cells = positive_cell_1,
reduction = "umap",
cells.highlight=which(Summary_list$batch_1[positive_cell_1,column]>=
sort(Summary_list$batch_1[positive_cell_1,column],decreasing = T)[cutoff])%>%names)+
theme(legend.position = "none")
}else{
dp <- DimPlot(Hong_S_2, cells = positive_cell_2,
reduction = "umap",
cells.highlight=which(Summary_list$batch_2[positive_cell_2,column]>=
sort(Summary_list$batch_2[positive_cell_2,column],decreasing = T)[cutoff])%>%names)+
theme(legend.position = "none")
}
return(dp+labs(title=paste0("top ",cutoff)))
}
layout <- "AB\nCD"
highlight_plot(1,1,10)+ # 1: CoV, 2: Num_Pos_Gene
highlight_plot(1,1,50)+
highlight_plot(1,1,100)+
highlight_plot(1,1,200)+plot_layout(design = layout)
highlight_plot(1,2,10)+ # 1: CoV, 2: Num_Pos_Gene
highlight_plot(1,2,50)+
highlight_plot(1,2,100)+
highlight_plot(1,2,200)+plot_layout(design = layout)
highlight_plot(2,1,10)+ # 1: CoV, 2: Num_Pos_Gene
highlight_plot(2,1,50)+
highlight_plot(2,1,100)+
highlight_plot(2,1,200)+plot_layout(design = layout)
highlight_plot(2,2,10)+ # 1: CoV, 2: Num_Pos_Gene
highlight_plot(2,2,50)+
highlight_plot(2,2,100)+
highlight_plot(2,2,200)+plot_layout(design = layout)
for(batch in names(Summary_list)){
write.csv(Summary_list[[batch]],
file = "~/Google Drive/Hallu/codes/ckgroup/Hong_CTC/TargetGene_summary_",batch,".csv",
row.names = T, col.names = T)
}
str(Summary_list[[batch]])
colnames(Summary_list[[batch]])
for(batch in names(Summary_list)){
write.csv(Summary_list[[batch]]%>%as.matrix,
file = "~/Google Drive/Hallu/codes/ckgroup/Hong_CTC/TargetGene_summary_",batch,".csv",
row.names = T, col.names = T)
}
for(batch in names(Summary_list)){
write.csv(Summary_list[[batch]],
file = paste0("~/Google Drive/Hallu/codes/ckgroup/Hong_CTC/TargetGene_summary_",batch,".csv"),
row.names = T, col.names = T)
}
str(Hong_CB2_1)
?NormalizeData
Summary_list$batch_1%>%head
i
str(Cell_list[[i]])
str(Cell_list[[i]]%>%NormalizeData)
identical(Cell_list[[i]]%>%NormalizeData,Hong_S_2@assays$RNA@data)
cell_tmp <- Cell_list[[i]]%>%NormalizeData
str(cell_tmp)
str(Hong_S_2@assays$RNA@data)
Summary_list2 <- Summary_list
Summary_list <- list()
for(i in 1:2){
cell_tmp <- Cell_list[[i]]%>%NormalizeData
CNV_tmp <- CNV_list[[i]]
Num_Pos_Gene <- colSums(cell_tmp[Target,]>0)
CoV <- apply(CNV_tmp,2,function(x) sd(x)/mean(x))
target_exp <- t(cell_tmp[Target,])
Summary_list[[paste0("batch_",i)]] <- cbind(CoV=CoV,Num_Pos_Gene=Num_Pos_Gene,
target_exp)
rownames(Summary_list[[paste0("batch_",i)]]) <- colnames(cell_tmp)
}
identical(Summary_list$batch_1[,1:2],Summary_list2$batch_1[,1:2])
save(Summary_list, file = "~/Google Drive/Hallu/codes/ckgroup/Hong_CTC/TargetGene_summary.RData")
for(batch in names(Summary_list)){
write.csv(Summary_list[[batch]],
file = paste0("~/Google Drive/Hallu/codes/ckgroup/Hong_CTC/TargetGene_summary_",batch,".csv"),
row.names = T, col.names = T)
}
str(Summary_list$batch_1)
33*3
43*3
38*3
str(Hong_CB2_1)
str(Hong_CB2_2)
write.table(Hong_CB2_1[1:20, 1:20], file = "~/Google Drive/Hallu/DATA/10x/Hong_confidential/191216/Batch1_CB2_raw.txt",
quote = F, sep = "\t")
str(Hong_CB2_1[1:20, 1:20])
DropletUtils::write10xCounts(path = "~/Google Drive/Hallu/DATA/10x/Hong_confidential/191216/18098-06_CB2/",
x = Hong_CB2_1)
DropletUtils::write10xCounts(path = "~/Google Drive/Hallu/DATA/10x/Hong_confidential/191216/18098-07_CB2/",
x = Hong_CB2_2)
DropletUtils::write10xCounts(path = "~/Google Drive/Hallu/DATA/10x/Hong_confidential/191216/18098-06_CB2/",
x = Hong_CB2_1, version = "3")
DropletUtils::write10xCounts(path = "~/Google Drive/Hallu/DATA/10x/Hong_confidential/191216/18098-07_CB2/",
x = Hong_CB2_2, version = "3")
getwd()
?install.packages
library(EBSeq)
library(tidyverse)
library(graphics)
dat_raw1 <- read.table("~/Google Drive/Hallu/codes/ckgroup/pipeline/BBLUM_MAY2020/RESULTS/expression.matrix")
dat_raw2 <- read.table("~/Google Drive/Hallu/codes/ckgroup/pipeline/BBLUM_MARCH2019/190311/expression.matrix")
colnames(dat_raw1) <- gsub(pattern=".genes.*",replace="",x=colnames(dat_raw1))
colnames(dat_raw2) <- gsub(pattern=".fastq.*",replace="",x=colnames(dat_raw2))
dat_raw_all <- cbind(dat_raw1,dat_raw2)
dat_raw1 <- read.table("~/Google Drive/Hallu/codes/ckgroup/pipeline/BBLUM_MAY2020/RESULTS/MAY2020_expression.matrix")
dat_raw2 <- read.table("~/Google Drive/Hallu/codes/ckgroup/pipeline/BBLUM_MARCH2019/190311/MARCH2019_expression.matrix")
raw_dir_MAY2020 <- "~/Google Drive/Hallu/codes/ckgroup/pipeline/BBLUM_MAY2020/RESULTS/MAY2020_expression.matrix"
raw_dir_MARCH2019 <- "~/Google Drive/Hallu/codes/ckgroup/pipeline/BBLUM_MARCH2019/190311/MARCH2019_expression.matrix"
# Specify samples to exclude.
exclude_pattern <- "S31|S32|S33|S81|S34|S13|S14|S15|S16"
raw_dir_MAY2020 <- "~/Google Drive/Hallu/codes/ckgroup/pipeline/BBLUM_MAY2020/RESULTS/MAY2020_expression.matrix"
raw_dir_MARCH2019 <- "~/Google Drive/Hallu/codes/ckgroup/pipeline/BBLUM_MARCH2019/190311/MARCH2019_expression.matrix"
dat_raw1 <- read.table(raw_dir_MAY2020)
dat_raw2 <- read.table(raw_dir_MARCH2019)
colnames(dat_raw1) <- gsub(pattern=".genes.*",replace="",x=colnames(dat_raw1))
colnames(dat_raw2) <- gsub(pattern=".fastq.*",replace="",x=colnames(dat_raw2))
dat_raw_all <- cbind(dat_raw1,dat_raw2)
dat_raw_filter <- dat_raw_all[,!grepl(exclude_pattern,colnames(dat_raw_all))]
exclude_pattern <- "716_S31|717_S32|721_S33|722-10-31-18_S81|723_S34|
596_S13|599_S14|602_S15|603_S16"
dat_raw_filter <- dat_raw_all[,!grepl(exclude_pattern,colnames(dat_raw_all))]
# Check which samples are filtered
print(setdiff(colnames(dat_raw_all),colnames(dat_raw_filter)))
# Specify samples to exclude.
# Use patterns specific to each sample
exclude_pattern <- "716_S31|717_S32|721_S33|18_S81|723_S34|596_S13|599_S14|602_S15|603_S16"
dat_raw_filter <- dat_raw_all[,!grepl(exclude_pattern,colnames(dat_raw_all))]
# Check which samples are filtered
print(setdiff(colnames(dat_raw_all),colnames(dat_raw_filter)))
# Specify gene filtering threshold.
# Genes with average expression below this threshold will be filtered.
# Default: 1
exp_threshold <- 1
# Specify output directory to save normalized data
out_dir <- "~/Google Drive/Hallu/codes/ckgroup/pipeline/BBLUM_MAY2020/RESULTS/"
dir.exists(out_dir)
if(!dir.exists(out_dir)) dir.create(out_dir)
# Specify output directory to save normalized data and hierarchical clustering dendrogram
out_dir <- "~/Google Drive/Hallu/codes/ckgroup/pipeline/BBLUM_MAY2020/RESULTS/filter_9/"
if(!dir.exists(out_dir)) dir.create(out_dir)
dat_raw1 <- read.table(raw_dir_MAY2020)
dat_raw2 <- read.table(raw_dir_MARCH2019)
colnames(dat_raw1) <- gsub(pattern=".genes.*",replace="",x=colnames(dat_raw1))
colnames(dat_raw2) <- gsub(pattern=".fastq.*",replace="",x=colnames(dat_raw2))
dat_raw_all <- cbind(dat_raw1,dat_raw2)
dat_raw_filter <- dat_raw_all[,!grepl(exclude_pattern,colnames(dat_raw_all))]
# Check which samples are filtered
# If result is wrong, check whether sample names fit with exclude_pattern
print(setdiff(colnames(dat_raw_all),colnames(dat_raw_filter)))
dat_raw_filter <- dat_raw_filter[rowMeans(dat_raw_filter)>=exp_threshold,]
paste0(out_dir,"/Normalized_Matrix.csv")
Mulsize <- MedianNorm(dat_raw_filter)
dat_norm <- GetNormalizedMat(dat_raw_filter, Mulsize)%>%round(2)
write.csv(dat_norm,
file=paste0(out_dir,"/Normalized_Matrix.csv"),
row.names=T, quote=F)
raw_dir_MAY2020 <- "~/Google Drive/Hallu/codes/ckgroup/pipeline/BBLUM_MAY2020/RESULTS/MAY2020_expression.matrix"
raw_dir_MARCH2019 <- "~/Google Drive/Hallu/codes/ckgroup/pipeline/BBLUM_MARCH2019/190311/MARCH2019_expression.matrix"
# Specify samples to exclude.
# Use patterns specific to each sample
exclude_pattern <- "716_S31|717_S32|721_S33|18_S81|723_S34|596_S13|599_S14|602_S15|603_S16"
# Specify gene filtering threshold.
# Genes with average expression below this threshold will be filtered.
# Default: 1
exp_threshold <- 1
# Specify output directory to save normalized data and hierarchical clustering dendrogram
out_dir <- "~/Google Drive/Hallu/codes/ckgroup/pipeline/BBLUM_MAY2020/RESULTS/filter_9"
library(EBSeq)
library(tidyverse)
library(graphics)
if(!dir.exists(out_dir)) dir.create(out_dir)
dat_raw1 <- read.table(raw_dir_MAY2020)
dat_raw2 <- read.table(raw_dir_MARCH2019)
colnames(dat_raw1) <- gsub(pattern=".genes.*",replace="",x=colnames(dat_raw1))
colnames(dat_raw2) <- gsub(pattern=".fastq.*",replace="",x=colnames(dat_raw2))
dat_raw_all <- cbind(dat_raw1,dat_raw2)
dat_raw_filter <- dat_raw_all[,!grepl(exclude_pattern,colnames(dat_raw_all))]
# Check which samples are filtered
# If result is wrong, check whether sample names fit with exclude_pattern
print(setdiff(colnames(dat_raw_all),colnames(dat_raw_filter)))
dat_raw_filter <- dat_raw_filter[rowMeans(dat_raw_filter)>=exp_threshold,]
Mulsize <- MedianNorm(dat_raw_filter)
dat_norm <- GetNormalizedMat(dat_raw_filter, Mulsize)%>%round(2)
write.csv(dat_norm,
file=paste0(out_dir,"/Normalized_Matrix.csv"),
row.names=T, quote=F)
write.table(dat_norm,
file=paste0(out_dir,"/Normalized_Matrix.txt"),
row.names=T, quote=F, sep = "\t")
boxplot(log1p(dat_raw_filter), main=paste0("Raw data"))
boxplot(log1p(dat_norm), main=paste0("Normalized data"))
pdf(paste0(out_dir,"/Cluster.pdf"),
height=15, width=10)
mtd = 1 - ( cor(log1p(dat_norm[[dt]]), use="pairwise.complete.obs") )^2
mtd.dist <- as.dist(mtd)
fig <- hclust(mtd.dist,method='average')
plot(fig, xlab= "sample", main=paste0("Cluster after MultiNormalization"))
dev.off()
pdf(paste0(out_dir,"/Cluster.pdf"),
height=15, width=10)
mtd = 1 - ( cor(log1p(dat_norm), use="pairwise.complete.obs") )^2
mtd.dist <- as.dist(mtd)
fig <- hclust(mtd.dist,method='average')
plot(fig, xlab= "sample", main=paste0("Cluster after MultiNormalization"))
dev.off()
raw_dir_MAY2020 <- "~/Google Drive/Hallu/codes/ckgroup/pipeline/BBLUM_MAY2020/RESULTS/MAY2020_expression.matrix"
raw_dir_MARCH2019 <- "~/Google Drive/Hallu/codes/ckgroup/pipeline/BBLUM_MARCH2019/190311/MARCH2019_expression.matrix"
# Specify samples to exclude.
# Use patterns specific to each sample
exclude_pattern <- "716_S31|717_S32|721_S33|18_S81|723_S34|729_S17|737_S18"
# Specify gene filtering threshold.
# Genes with average expression below this threshold will be filtered.
# Default: 1
exp_threshold <- 1
# Specify output directory to save normalized data and hierarchical clustering dendrogram
out_dir <- "~/Google Drive/Hallu/codes/ckgroup/pipeline/BBLUM_MAY2020/RESULTS/filter_7"
if(!dir.exists(out_dir)) dir.create(out_dir)
dat_raw1 <- read.table(raw_dir_MAY2020)
dat_raw2 <- read.table(raw_dir_MARCH2019)
colnames(dat_raw1) <- gsub(pattern=".genes.*",replace="",x=colnames(dat_raw1))
colnames(dat_raw2) <- gsub(pattern=".fastq.*",replace="",x=colnames(dat_raw2))
dat_raw_all <- cbind(dat_raw1,dat_raw2)
dat_raw_filter <- dat_raw_all[,!grepl(exclude_pattern,colnames(dat_raw_all))]
# Check which samples are filtered
# If result is wrong, check whether sample names fit with exclude_pattern
print(setdiff(colnames(dat_raw_all),colnames(dat_raw_filter)))
dat_raw_filter <- dat_raw_filter[rowMeans(dat_raw_filter)>=exp_threshold,]
Mulsize <- MedianNorm(dat_raw_filter)
dat_norm <- GetNormalizedMat(dat_raw_filter, Mulsize)%>%round(2)
write.csv(dat_norm,
file=paste0(out_dir,"/Normalized_Matrix.csv"),
row.names=T, quote=F)
write.table(dat_norm,
file=paste0(out_dir,"/Normalized_Matrix.txt"),
row.names=T, quote=F, sep = "\t")
boxplot(log1p(dat_raw_filter), main=paste0("Raw data"))
boxplot(log1p(dat_norm), main=paste0("Normalized data"))
pdf(paste0(out_dir,"/Cluster.pdf"),
height=15, width=10)
mtd = 1 - ( cor(log1p(dat_norm), use="pairwise.complete.obs") )^2
mtd.dist <- as.dist(mtd)
fig <- hclust(mtd.dist,method='average')
plot(fig, xlab= "sample", main=paste0("Cluster after MultiNormalization"))
dev.off()
data(mbrainSub)
library(scCB2)
data(mbrainSub)
data.dir <- file.path(tempdir(),"CB2_example")
DropletUtils::write10xCounts(data.dir,
mbrainSub,
version = "3")
list.files(data.dir)
mbrainSub_2 <- Read10xRaw(data.dir)
identical(mbrainSub, mbrainSub_2)
remove.packages("scCB2")
install.packages("~/Google Drive/GitHub/scCB2/scCB2_0.99.24.tar.gz", repos = NULL, type="source")
BiocCheck::BiocCheck("~/Google Drive/GitHub/scCB2/scCB2/")
document()
library(devtools)
setwd("~/Google Drive/GitHub/scCB2/scCB2/")
document()
build()
check(vignettes = F)
getwd()
document()
sys.time()
Sys.time()
time_begin <- Sys.time()
print(Sys.time() - time_begin)
message(Sys.time() - time_begin)
message(Sys.time() - time_begin)
cat(Sys.time() - time_begin)
?pch
